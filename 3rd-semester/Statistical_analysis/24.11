{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ID  Dni hospitalizacji  Wiek Płeć  Temperatura Antybiotyk  \\\n",
      "0    1                   5    30    K         37.2          N   \n",
      "1    2                  10    73    K         36.7          N   \n",
      "2    3                   6    40    K         37.2          N   \n",
      "3    4                  11    47    K         36.8          N   \n",
      "4    5                   5    25    K         36.9          N   \n",
      "5    6                  14    82    M         36.0          T   \n",
      "6    7                  30    60    M         37.5          T   \n",
      "7    8                  11    56    K         37.0          N   \n",
      "8    9                  17    43    K         36.7          N   \n",
      "9   10                   3    50    M         36.7          N   \n",
      "10  11                   9    59    K         36.4          N   \n",
      "11  12                   3     4    M         36.6          N   \n",
      "12  13                   8    22    K         37.5          T   \n",
      "13  14                   8    33    K         36.9          T   \n",
      "14  15                   5    20    K         36.9          N   \n",
      "15  16                   5    32    M         37.2          N   \n",
      "16  17                   7    36    M         37.3          T   \n",
      "17  18                   4    69    M         36.7          N   \n",
      "18  19                   3    47    M         36.1          T   \n",
      "19  20                   7    22    M         36.8          N   \n",
      "20  21                   9    11    M         36.8          N   \n",
      "21  22                  11    19    M         37.0          T   \n",
      "22  23                  11    67    K         36.4          N   \n",
      "23  24                   9    43    K         37.0          N   \n",
      "24  25                   4    41    K         36.7          N   \n",
      "\n",
      "   Kultury bakterii  WBC  \n",
      "0                 N    8  \n",
      "1                 T    5  \n",
      "2                 N   12  \n",
      "3                 N    4  \n",
      "4                 N   11  \n",
      "5                 N    6  \n",
      "6                 T    8  \n",
      "7                 N    7  \n",
      "8                 N    7  \n",
      "9                 T   12  \n",
      "10                T    7  \n",
      "11                N    3  \n",
      "12                N   11  \n",
      "13                T   14  \n",
      "14                T   11  \n",
      "15                N    9  \n",
      "16                N    6  \n",
      "17                N    6  \n",
      "18                N    5  \n",
      "19                N    6  \n",
      "20                N   10  \n",
      "21                N   14  \n",
      "22                N    4  \n",
      "23                N    5  \n",
      "24                N    5  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "dane = pd.read_excel(r'E:\\3sem\\Statystyka\\17.11\\Antybiotyki2.xls', sheet_name = 'Dane 2')\n",
    "print(dane)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "dane.hist('Wiek', by= 'Płeć', bins = 5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## zad 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Waga  Wzrost\n",
      "0   83.9     185\n",
      "1   99.0     180\n",
      "2   63.8     168\n",
      "3   71.3     173\n",
      "4   65.3     175\n",
      "5   79.6     183\n",
      "6   70.3     184\n",
      "7   69.2     174\n",
      "8   56.4     164\n",
      "9   66.2     169\n",
      "10  88.7     205\n",
      "11  59.7     161\n",
      "12  64.6     177\n",
      "13  78.8     174\n"
     ]
    }
   ],
   "source": [
    "dane2 = pd.read_excel(r'E:\\3sem\\Statystyka\\10.11\\WagaWzrost.xls')\n",
    "print(dane2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Waga</th>\n",
       "      <th>Wzrost</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>14.000000</td>\n",
       "      <td>14.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>72.628571</td>\n",
       "      <td>176.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>11.943355</td>\n",
       "      <td>10.910223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>56.400000</td>\n",
       "      <td>161.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>64.775000</td>\n",
       "      <td>170.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>69.750000</td>\n",
       "      <td>174.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>79.400000</td>\n",
       "      <td>182.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>99.000000</td>\n",
       "      <td>205.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Waga      Wzrost\n",
       "count  14.000000   14.000000\n",
       "mean   72.628571  176.571429\n",
       "std    11.943355   10.910223\n",
       "min    56.400000  161.000000\n",
       "25%    64.775000  170.000000\n",
       "50%    69.750000  174.500000\n",
       "75%    79.400000  182.250000\n",
       "max    99.000000  205.000000"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dane2.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Średnia = 72.62857142857143\n",
      "Odchylenie standardowe = 11.943355318491378\n",
      "Wariancja = 0.16444431005003862\n",
      "Średnia2 = 176.57142857142858\n"
     ]
    }
   ],
   "source": [
    "#współczynnik zmienności dla średniej = s/(x_)\n",
    "mean1 = dane2['Waga'].mean()\n",
    "print(f'Średnia = {mean1}')\n",
    "\n",
    "s1 = dane2['Waga'].std()\n",
    "print(f'Odchylenie standardowe = {s1}')\n",
    "#std = standard deviation, tj. odchylenie standardowe\n",
    "\n",
    "V1 = s1/mean1\n",
    "print(f'Wariancja = {V1}')\n",
    "\n",
    "mean2 = dane2['Wzrost'].mean()\n",
    "print(f'Średnia2 = {mean2}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Kwartyle dla wzrostu:\n",
      "Q2 = 174.5\n",
      "Q1 = 170.0\n",
      "Q3 = 182.25\n"
     ]
    }
   ],
   "source": [
    "print(\"Kwartyle dla wzrostu:\")\n",
    "\n",
    "Q2_wzrost = dane2['Wzrost'].quantile(0.5)\n",
    "print(f'Q2 = {Q2_wzrost}')\n",
    "\n",
    "Q1_wzrost = dane2['Wzrost'].quantile(0.25)\n",
    "print(f'Q1 = {Q1_wzrost}')\n",
    "\n",
    "Q3_wzrost = dane2['Wzrost'].quantile(0.75)\n",
    "print(f'Q3 = {Q3_wzrost}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Kwartyle dla wagi:\n",
      "Q2 = 69.75\n",
      "Q1 = 64.77499999999999\n",
      "Q3 = 79.39999999999999\n"
     ]
    }
   ],
   "source": [
    "print('Kwartyle dla wagi:')\n",
    "\n",
    "Q2_waga = dane2['Waga'].quantile(0.5)\n",
    "print(f'Q2 = {Q2_waga}')\n",
    "\n",
    "Q1_waga = dane2['Waga'].quantile(0.25)\n",
    "print(f'Q1 = {Q1_waga}')\n",
    "\n",
    "Q3_waga = dane2['Waga'].quantile(0.75)\n",
    "print(f'Q3 = {Q3_waga}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Współczynnik zmienności dla mediany dla wzrostu wynosi 0.03510028653295129\n"
     ]
    }
   ],
   "source": [
    "Q_wzrost = (Q3_wzrost - Q1_wzrost)/2\n",
    "#Współczynnik zmienności dla mediany:\n",
    "#Q = (Q3-Q2)/2\n",
    "VMe_wzrost = Q_wzrost/Q2_wzrost\n",
    "print(f'Współczynnik zmienności dla mediany dla wzrostu wynosi {VMe_wzrost}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Współczynnik zmienności dla mediany dla wagi wynosi 0.10483870967741936\n"
     ]
    }
   ],
   "source": [
    "Q_waga = (Q3_waga - Q1_waga)/2\n",
    "#Współczynnik zmienności dla mediany:\n",
    "#Q = (Q3-Q2)/2\n",
    "VMe_waga = Q_waga/Q2_waga\n",
    "print(f'Współczynnik zmienności dla mediany dla wagi wynosi {VMe_waga}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### zad 13te - przeskakujemy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## zad 14:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "# jak dodasz \"density = x\", zmieniasz skalę osi Y.\n",
    "# Density = 0, wtedy na osi Y masz liczbę osób bezpośrednio, nieprzeskalowane.\n",
    "# Jak dodasz cumulative = 1, robisz dystrybuantę empiryczną\n",
    "# density = 1, cumulative = 0 daje nam odpowiednik funkcji gęstości prawodpobieństwa\n",
    "# density = 1, cumulative = 1 daje nam dystrybuantę empiryczną\n",
    "dane.hist('Wiek', bins = [20,30,40,50,60,70,80,90], density = 1, cumulative = 0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Proba 1  Proba 2  Proba 3  Proba 4\n",
      "0        67       31      102     12.1\n",
      "1        70       43       55     12.1\n",
      "2        63       30       70     12.4\n",
      "3        65       30       95     12.1\n",
      "4        68       38       73     12.1\n",
      "5        60       26       79     12.2\n",
      "6        70       29       60     12.2\n",
      "7        64       55       73     12.2\n",
      "8        69       46       89     11.9\n",
      "9        61       26       85     12.2\n",
      "10       66       29       72     12.3\n",
      "11       65       57       92     12.3\n",
      "12       71       34       76     11.7\n",
      "13       62       34       93     12.3\n",
      "14       66       36       76     12.3\n",
      "15       68       40       97     12.4\n",
      "16       64       28       10     12.4\n",
      "17       67       26       70     12.1\n",
      "18       62       66       85     12.4\n",
      "19       66       63       25     12.4\n",
      "20       65       30       83     12.5\n",
      "21       63       33       58     11.8\n",
      "22       66       24       10     12.5\n",
      "23       65       35       92     12.5\n",
      "24       63       34       82     12.5\n",
      "25       69       40       87     11.6\n",
      "26       62       24      104     11.6\n",
      "27       67       29       75     12.0\n",
      "28       59       24       80     11.6\n",
      "29       66       27       66     11.6\n",
      "30       65       35       93     11.7\n",
      "31       63       33       90     12.3\n",
      "32       65       75       84     11.7\n",
      "33       60       38       73     11.7\n",
      "34       67       34       98     11.7\n",
      "35       64       85       79     11.8\n",
      "36       68       29       35     12.5\n",
      "37       61       40       71     11.8\n",
      "38       69       41       90     11.8\n",
      "39       65       35       71     11.8\n",
      "40       62       26       63     11.9\n",
      "41       67       34       58     11.9\n",
      "42       70       19       82     11.9\n",
      "43       64       23       72     12.2\n",
      "44       63       28       93     11.9\n",
      "45       68       26       44     12.0\n",
      "46       64       31       65     11.9\n",
      "47       65       25       77     12.0\n",
      "48       61       22       81     12.0\n",
      "49       66       28       77     12.0\n"
     ]
    }
   ],
   "source": [
    "dane3 = pd.read_excel(r'E:\\3sem\\Statystyka\\10.11\\Rozkłady.xlsx')\n",
    "print(dane3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Średnia = 35.48 \n",
      "Mediana = 32.0 \n",
      "Skośność = 1.9774236639188756\n",
      "0    26\n",
      "1    34\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "wiek = dane3['Proba 2']\n",
    "Średnia = wiek.mean()\n",
    "Mediana = wiek.median()\n",
    "Skośność = wiek.skew()\n",
    "print('Średnia =', Średnia, '\\nMediana =', Mediana, \"\\nSkośność =\", Skośność)\n",
    "\n",
    "\n",
    "#współczynnik skośności dla asymetrii prawostronnej jest dodatni"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(wiek)\n",
    "plt.axvline(Średnia, color='red', label='Średnia')\n",
    "plt.axvline(Mediana, color='yellow', label='Mediana')\n",
    "plt.legend()\n",
    "plt.xlabel('Wiek')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
